배열은 진짜 연속된 메모리 블록이라 캐시 효율까지 체감 가능

포인터로 직접 주소 계산 → Python의 인덱싱 오버헤드 제거

malloc/free 혹은 new/delete 써서 메모리 관리 직접 경험

구조체(struct), 클래스(class)로 데이터 레이아웃을 설계하면 메모리 접근 패턴 최적화 가능

std::vector, std::deque, std::list 같은 STL 컨테이너들의 성능 차이도 비교할 수 있음

=====================================================================================================

지금 만든 파이썬 Array/Stack/Queue → C++로 직접 구현
동적 배열(std::vector 동작 원리)도 직접 만들어보기

정렬 알고리즘 (버블/퀵/머지) 구현 → 입력 크기 키워서 실행 시간 비교

메모리 패턴 최적화 실험
예: 2차원 배열을 arr[row][col]로 할 때 vs 1차원 플랫 배열로 할 때 속도 비교
캐시 친화적인 접근 순서 vs 랜덤 접근

STL 컨테이너 성능 비교
vector, deque, list 각각 push/pop/search 성능 측정

=====================================================================================================

git add .
git commit -m "로컬 변경사항 저장"
git push